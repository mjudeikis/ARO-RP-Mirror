// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/frontend/adminactions (interfaces: Interface)

// Package mock_adminactions is a generated GoMock package.
package mock_adminactions

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// K8sCreateOrUpdate mocks base method
func (m *MockInterface) K8sCreateOrUpdate(arg0 context.Context, arg1 *unstructured.Unstructured) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "K8sCreateOrUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// K8sCreateOrUpdate indicates an expected call of K8sCreateOrUpdate
func (mr *MockInterfaceMockRecorder) K8sCreateOrUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "K8sCreateOrUpdate", reflect.TypeOf((*MockInterface)(nil).K8sCreateOrUpdate), arg0, arg1)
}

// K8sDelete mocks base method
func (m *MockInterface) K8sDelete(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "K8sDelete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// K8sDelete indicates an expected call of K8sDelete
func (mr *MockInterfaceMockRecorder) K8sDelete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "K8sDelete", reflect.TypeOf((*MockInterface)(nil).K8sDelete), arg0, arg1, arg2, arg3)
}

// K8sGet mocks base method
func (m *MockInterface) K8sGet(arg0 context.Context, arg1, arg2, arg3 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "K8sGet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// K8sGet indicates an expected call of K8sGet
func (mr *MockInterfaceMockRecorder) K8sGet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "K8sGet", reflect.TypeOf((*MockInterface)(nil).K8sGet), arg0, arg1, arg2, arg3)
}

// K8sList mocks base method
func (m *MockInterface) K8sList(arg0 context.Context, arg1, arg2 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "K8sList", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// K8sList indicates an expected call of K8sList
func (mr *MockInterfaceMockRecorder) K8sList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "K8sList", reflect.TypeOf((*MockInterface)(nil).K8sList), arg0, arg1, arg2)
}

// ResourcesList mocks base method
func (m *MockInterface) ResourcesList(arg0 context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcesList", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcesList indicates an expected call of ResourcesList
func (mr *MockInterfaceMockRecorder) ResourcesList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcesList", reflect.TypeOf((*MockInterface)(nil).ResourcesList), arg0)
}

// Upgrade mocks base method
func (m *MockInterface) Upgrade(arg0 context.Context, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upgrade indicates an expected call of Upgrade
func (mr *MockInterfaceMockRecorder) Upgrade(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockInterface)(nil).Upgrade), arg0, arg1)
}

// VMRedeployAndWait mocks base method
func (m *MockInterface) VMRedeployAndWait(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VMRedeployAndWait", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VMRedeployAndWait indicates an expected call of VMRedeployAndWait
func (mr *MockInterfaceMockRecorder) VMRedeployAndWait(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VMRedeployAndWait", reflect.TypeOf((*MockInterface)(nil).VMRedeployAndWait), arg0, arg1)
}

// VMSerialConsole mocks base method
func (m *MockInterface) VMSerialConsole(arg0 context.Context, arg1 http.ResponseWriter, arg2 *logrus.Entry, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VMSerialConsole", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// VMSerialConsole indicates an expected call of VMSerialConsole
func (mr *MockInterfaceMockRecorder) VMSerialConsole(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VMSerialConsole", reflect.TypeOf((*MockInterface)(nil).VMSerialConsole), arg0, arg1, arg2, arg3)
}
